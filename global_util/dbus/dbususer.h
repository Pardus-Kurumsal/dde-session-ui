/**
 * Copyright (C) 2015 Deepin Technology Co., Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 **/

/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusUser -l dbususer -p dbususer com.deepin.daemon.Accounts.User
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSUSER_H_1447229852
#define DBUSUSER_H_1447229852

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.daemon.Accounts.User
 */
class DBusUser: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage& msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count())
            return;
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName !="com.deepin.daemon.Accounts.User")
            return;
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        QStringList keys = changedProps.keys();
        foreach(const QString &prop, keys) {
        const QMetaObject* self = metaObject();
            for (int i=self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
 	            Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
   }
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Accounts.User"; }

public:
    DBusUser(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~DBusUser();

    Q_PROPERTY(int AccountType READ accountType NOTIFY AccountTypeChanged)
    inline int accountType() const
    { return qvariant_cast< int >(property("AccountType")); }

    Q_PROPERTY(bool AutomaticLogin READ automaticLogin NOTIFY AutomaticLoginChanged)
    inline bool automaticLogin() const
    { return qvariant_cast< bool >(property("AutomaticLogin")); }

    Q_PROPERTY(QString BackgroundFile READ backgroundFile NOTIFY BackgroundFileChanged)
    inline QString backgroundFile() const
    { return qvariant_cast< QString >(property("BackgroundFile")); }

    Q_PROPERTY(QString Gid READ gid NOTIFY GidChanged)
    inline QString gid() const
    { return qvariant_cast< QString >(property("Gid")); }

    Q_PROPERTY(QStringList HistoryIcons READ historyIcons NOTIFY HistoryIconsChanged)
    inline QStringList historyIcons() const
    { return qvariant_cast< QStringList >(property("HistoryIcons")); }

    Q_PROPERTY(QStringList HistoryLayout READ historyLayout NOTIFY HistoryLayoutChanged)
    inline QStringList historyLayout() const
    { return qvariant_cast< QStringList >(property("HistoryLayout")); }

    Q_PROPERTY(QString HomeDir READ homeDir NOTIFY HomeDirChanged)
    inline QString homeDir() const
    { return qvariant_cast< QString >(property("HomeDir")); }

    Q_PROPERTY(QString Layout READ layout WRITE SetLayout)
    inline QString layout() const
    { return qvariant_cast< QString >(property("Layout")); }

    Q_PROPERTY(QString IconFile READ iconFile NOTIFY IconFileChanged)
    inline QString iconFile() const
    { return qvariant_cast< QString >(property("IconFile")); }

    Q_PROPERTY(QStringList IconList READ iconList NOTIFY IconListChanged)
    inline QStringList iconList() const
    { return qvariant_cast< QStringList >(property("IconList")); }

    Q_PROPERTY(bool Locked READ locked NOTIFY LockedChanged)
    inline bool locked() const
    { return qvariant_cast< bool >(property("Locked")); }

    Q_PROPERTY(qulonglong LoginTime READ loginTime NOTIFY LoginTimeChanged)
    inline qulonglong loginTime() const
    { return qvariant_cast< qulonglong >(property("LoginTime")); }

    Q_PROPERTY(QString Shell READ shell NOTIFY ShellChanged)
    inline QString shell() const
    { return qvariant_cast< QString >(property("Shell")); }

    Q_PROPERTY(QString Uid READ uid NOTIFY UidChanged)
    inline QString uid() const
    { return qvariant_cast< QString >(property("Uid")); }

    Q_PROPERTY(QString UserName READ userName NOTIFY UserNameChanged)
    inline QString userName() const
    { return qvariant_cast< QString >(property("UserName")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> DeleteHistoryIcon(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("DeleteHistoryIcon"), argumentList);
    }

    inline QDBusPendingReply<bool> DeleteIconFile(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("DeleteIconFile"), argumentList);
    }

    inline QDBusPendingReply<QString> GetLargeIcon()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetLargeIcon"), argumentList);
    }

    inline QDBusPendingReply<bool> IsIconDeletable(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("IsIconDeletable"), argumentList);
    }

    inline QDBusPendingReply<bool> SetAccountType(int in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetAccountType"), argumentList);
    }

    inline QDBusPendingReply<bool> SetAutomaticLogin(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetAutomaticLogin"), argumentList);
    }

    inline QDBusPendingReply<bool> SetBackgroundFile(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetBackgroundFile"), argumentList);
    }

    inline QDBusPendingReply<bool> SetHomeDir(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetHomeDir"), argumentList);
    }

    inline QDBusPendingReply<bool> SetLayout(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetLayout"), argumentList);
    }

    inline QDBusPendingReply<bool> SetIconFile(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetIconFile"), argumentList);
    }

    inline QDBusPendingReply<bool> SetLocked(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetLocked"), argumentList);
    }

    inline QDBusPendingReply<bool> SetPassword(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetPassword"), argumentList);
    }

    inline QDBusPendingReply<bool> SetShell(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetShell"), argumentList);
    }

    inline QDBusPendingReply<bool> SetUserName(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetUserName"), argumentList);
    }

Q_SIGNALS: // SIGNALS
// begin property changed signals
void AccountTypeChanged();
void AutomaticLoginChanged();
void BackgroundFileChanged();
void GidChanged();
void HistoryIconsChanged();
void HomeDirChanged();
void IconFileChanged();
void IconListChanged();
void LockedChanged();
void LoginTimeChanged();
void ShellChanged();
void UidChanged();
void UserNameChanged();
void HistoryLayoutChanged();
};

namespace com {
  namespace deepin {
    namespace daemon {
      namespace Account {
        typedef ::DBusUser User;
      }
    }
  }
}
#endif
